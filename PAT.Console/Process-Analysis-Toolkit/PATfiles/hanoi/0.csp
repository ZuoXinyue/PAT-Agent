#define NUM_DISKS 2;
#define NUM_PEGS 3;
#define DISK_LARGE 2;
#define DISK_SMALL 1;
#define DISK_EMPTY 0;

var peg1[NUM_DISKS] = [DISK_LARGE, DISK_SMALL];
var peg2[NUM_DISKS] = [DISK_EMPTY, DISK_EMPTY];
var peg3[NUM_DISKS] = [DISK_EMPTY, DISK_EMPTY];

hanoi() = 
    // Moves from peg1 to peg2
    [peg1[1] == DISK_SMALL && peg2[0] == DISK_EMPTY && peg2[1] == DISK_EMPTY] 
        move_peg1_to_peg2_from_top_small_to_empty{peg1[1] = DISK_EMPTY; peg2[0] = DISK_SMALL;} -> hanoi()
    []
    [peg1[1] == DISK_SMALL && peg2[0] == DISK_LARGE && peg2[1] == DISK_EMPTY] 
        move_peg1_to_peg2_from_top_small_to_partial{peg1[1] = DISK_EMPTY; peg2[1] = DISK_SMALL;} -> hanoi()
    []
    [peg1[1] == DISK_LARGE && peg2[0] == DISK_EMPTY && peg2[1] == DISK_EMPTY] 
        move_peg1_to_peg2_from_top_large_to_empty{peg1[1] = DISK_EMPTY; peg2[0] = DISK_LARGE;} -> hanoi()
    []
    [peg1[1] == DISK_EMPTY && peg1[0] == DISK_SMALL && peg2[0] == DISK_EMPTY && peg2[1] == DISK_EMPTY] 
        move_peg1_to_peg2_from_bottom_small_to_empty{peg1[0] = DISK_EMPTY; peg2[0] = DISK_SMALL;} -> hanoi()
    []
    [peg1[1] == DISK_EMPTY && peg1[0] == DISK_SMALL && peg2[0] == DISK_LARGE && peg2[1] == DISK_EMPTY] 
        move_peg1_to_peg2_from_bottom_small_to_partial{peg1[0] = DISK_EMPTY; peg2[1] = DISK_SMALL;} -> hanoi()
    []
    [peg1[1] == DISK_EMPTY && peg1[0] == DISK_LARGE && peg2[0] == DISK_EMPTY && peg2[1] == DISK_EMPTY] 
        move_peg1_to_peg2_from_bottom_large_to_empty{peg1[0] = DISK_EMPTY; peg2[0] = DISK_LARGE;} -> hanoi()
    []
    
    // Moves from peg1 to peg3
    [peg1[1] == DISK_SMALL && peg3[0] == DISK_EMPTY && peg3[1] == DISK_EMPTY] 
        move_peg1_to_peg3_from_top_small_to_empty{peg1[1] = DISK_EMPTY; peg3[0] = DISK_SMALL;} -> hanoi()
    []
    [peg1[1] == DISK_SMALL && peg3[0] == DISK_LARGE && peg3[1] == DISK_EMPTY] 
        move_peg1_to_peg3_from_top_small_to_partial{peg1[1] = DISK_EMPTY; peg3[1] = DISK_SMALL;} -> hanoi()
    []
    [peg1[1] == DISK_LARGE && peg3[0] == DISK_EMPTY && peg3[1] == DISK_EMPTY] 
        move_peg1_to_peg3_from_top_large_to_empty{peg1[1] = DISK_EMPTY; peg3[0] = DISK_LARGE;} -> hanoi()
    []
    [peg1[1] == DISK_EMPTY && peg1[0] == DISK_SMALL && peg3[0] == DISK_EMPTY && peg3[1] == DISK_EMPTY] 
        move_peg1_to_peg3_from_bottom_small_to_empty{peg1[0] = DISK_EMPTY; peg3[0] = DISK_SMALL;} -> hanoi()
    []
    [peg1[1] == DISK_EMPTY && peg1[0] == DISK_SMALL && peg3[0] == DISK_LARGE && peg3[1] == DISK_EMPTY] 
        move_peg1_to_peg3_from_bottom_small_to_partial{peg1[0] = DISK_EMPTY; peg3[1] = DISK_SMALL;} -> hanoi()
    []
    [peg1[1] == DISK_EMPTY && peg1[0] == DISK_LARGE && peg3[0] == DISK_EMPTY && peg3[1] == DISK_EMPTY] 
        move_peg1_to_peg3_from_bottom_large_to_empty{peg1[0] = DISK_EMPTY; peg3[0] = DISK_LARGE;} -> hanoi()
    []
    
    // Moves from peg2 to peg1
    [peg2[1] == DISK_SMALL && peg1[0] == DISK_EMPTY && peg1[1] == DISK_EMPTY] 
        move_peg2_to_peg1_from_top_small_to_empty{peg2[1] = DISK_EMPTY; peg1[0] = DISK_SMALL;} -> hanoi()
    []
    [peg2[1] == DISK_SMALL && peg1[0] == DISK_LARGE && peg1[1] == DISK_EMPTY] 
        move_peg2_to_peg1_from_top_small_to_partial{peg2[1] = DISK_EMPTY; peg1[1] = DISK_SMALL;} -> hanoi()
    []
    [peg2[1] == DISK_LARGE && peg1[0] == DISK_EMPTY && peg1[1] == DISK_EMPTY] 
        move_peg2_to_peg1_from_top_large_to_empty{peg2[1] = DISK_EMPTY; peg1[0] = DISK_LARGE;} -> hanoi()
    []
    [peg2[1] == DISK_EMPTY && peg2[0] == DISK_SMALL && peg1[0] == DISK_EMPTY && peg1[1] == DISK_EMPTY] 
        move_peg2_to_peg1_from_bottom_small_to_empty{peg2[0] = DISK_EMPTY; peg1[0] = DISK_SMALL;} -> hanoi()
    []
    [peg2[1] == DISK_EMPTY && peg2[0] == DISK_SMALL && peg1[0] == DISK_LARGE && peg1[1] == DISK_EMPTY] 
        move_peg2_to_peg1_from_bottom_small_to_partial{peg2[0] = DISK_EMPTY; peg1[1] = DISK_SMALL;} -> hanoi()
    []
    [peg2[1] == DISK_EMPTY && peg2[0] == DISK_LARGE && peg1[0] == DISK_EMPTY && peg1[1] == DISK_EMPTY] 
        move_peg2_to_peg1_from_bottom_large_to_empty{peg2[0] = DISK_EMPTY; peg1[0] = DISK_LARGE;} -> hanoi()
    []
    
    // Moves from peg2 to peg3
    [peg2[1] == DISK_SMALL && peg3[0] == DISK_EMPTY && peg3[1] == DISK_EMPTY] 
        move_peg2_to_peg3_from_top_small_to_empty{peg2[1] = DISK_EMPTY; peg3[0] = DISK_SMALL;} -> hanoi()
    []
    [peg2[1] == DISK_SMALL && peg3[0] == DISK_LARGE && peg3[1] == DISK_EMPTY] 
        move_peg2_to_peg3_from_top_small_to_partial{peg2[1] = DISK_EMPTY; peg3[1] = DISK_SMALL;} -> hanoi()
    []
    [peg2[1] == DISK_LARGE && peg3[0] == DISK_EMPTY && peg3[1] == DISK_EMPTY] 
        move_peg2_to_peg3_from_top_large_to_empty{peg2[1] = DISK_EMPTY; peg3[0] = DISK_LARGE;} -> hanoi()
    []
    [peg2[1] == DISK_EMPTY && peg2[0] == DISK_SMALL && peg3[0] == DISK_EMPTY && peg3[1] == DISK_EMPTY] 
        move_peg2_to_peg3_from_bottom_small_to_empty{peg2[0] = DISK_EMPTY; peg3[0] = DISK_SMALL;} -> hanoi()
    []
    [peg2[1] == DISK_EMPTY && peg2[0] == DISK_SMALL && peg3[0] == DISK_LARGE && peg3[1] == DISK_EMPTY] 
        move_peg2_to_peg3_from_bottom_small_to_partial{peg2[0] = DISK_EMPTY; peg3[1] = DISK_SMALL;} -> hanoi()
    []
    [peg2[1] == DISK_EMPTY && peg2[0] == DISK_LARGE && peg3[0] == DISK_EMPTY && peg3[1] == DISK_EMPTY] 
        move_peg2_to_peg3_from_bottom_large_to_empty{peg2[0] = DISK_EMPTY; peg3[0] = DISK_LARGE;} -> hanoi()
    []
    
    // Moves from peg3 to peg1
    [peg3[1] == DISK_SMALL && peg1[0] == DISK_EMPTY && peg1[1] == DISK_EMPTY] 
        move_peg3_to_peg1_from_top_small_to_empty{peg3[1] = DISK_EMPTY; peg1[0] = DISK_SMALL;} -> hanoi()
    []
    [peg3[1] == DISK_SMALL && peg1[0] == DISK_LARGE && peg1[1] == DISK_EMPTY] 
        move_peg3_to_peg1_from_top_small_to_partial{peg3[1] = DISK_EMPTY; peg1[1] = DISK_SMALL;} -> hanoi()
    []
    [peg3[1] == DISK_LARGE && peg1[0] == DISK_EMPTY && peg1[1] == DISK_EMPTY] 
        move_peg3_to_peg1_from_top_large_to_empty{peg3[1] = DISK_EMPTY; peg1[0] = DISK_LARGE;} -> hanoi()
    []
    [peg3[1] == DISK_EMPTY && peg3[0] == DISK_SMALL && peg1[0] == DISK_EMPTY && peg1[1] == DISK_EMPTY] 
        move_peg3_to_peg1_from_bottom_small_to_empty{peg3[0] = DISK_EMPTY; peg1[0] = DISK_SMALL;} -> hanoi()
    []
    [peg3[1] == DISK_EMPTY && peg3[0] == DISK_SMALL && peg1[0] == DISK_LARGE && peg1[1] == DISK_EMPTY] 
        move_peg3_to_peg1_from_bottom_small_to_partial{peg3[0] = DISK_EMPTY; peg1[1] = DISK_SMALL;} -> hanoi()
    []
    [peg3[1] == DISK_EMPTY && peg3[0] == DISK_LARGE && peg1[0] == DISK_EMPTY && peg1[1] == DISK_EMPTY] 
        move_peg3_to_peg1_from_bottom_large_to_empty{peg3[0] = DISK_EMPTY; peg1[0] = DISK_LARGE;} -> hanoi()
    []
    
    // Moves from peg3 to peg2
    [peg3[1] == DISK_SMALL && peg2[0] == DISK_EMPTY && peg2[1] == DISK_EMPTY] 
        move_peg3_to_peg2_from_top_small_to_empty{peg3[1] = DISK_EMPTY; peg2[0] = DISK_SMALL;} -> hanoi()
    []
    [peg3[1] == DISK_SMALL && peg2[0] == DISK_LARGE && peg2[1] == DISK_EMPTY] 
        move_peg3_to_peg2_from_top_small_to_partial{peg3[1] = DISK_EMPTY; peg2[1] = DISK_SMALL;} -> hanoi()
    []
    [peg3[1] == DISK_LARGE && peg2[0] == DISK_EMPTY && peg2[1] == DISK_EMPTY] 
        move_peg3_to_peg2_from_top_large_to_empty{peg3[1] = DISK_EMPTY; peg2[0] = DISK_LARGE;} -> hanoi()
    []
    [peg3[1] == DISK_EMPTY && peg3[0] == DISK_SMALL && peg2[0] == DISK_EMPTY && peg2[1] == DISK_EMPTY] 
        move_peg3_to_peg2_from_bottom_small_to_empty{peg3[0] = DISK_EMPTY; peg2[0] = DISK_SMALL;} -> hanoi()
    []
    [peg3[1] == DISK_EMPTY && peg3[0] == DISK_SMALL && peg2[0] == DISK_LARGE && peg2[1] == DISK_EMPTY] 
        move_peg3_to_peg2_from_bottom_small_to_partial{peg3[0] = DISK_EMPTY; peg2[1] = DISK_SMALL;} -> hanoi()
    []
    [peg3[1] == DISK_EMPTY && peg3[0] == DISK_LARGE && peg2[0] == DISK_EMPTY && peg2[1] == DISK_EMPTY] 
        move_peg3_to_peg2_from_bottom_large_to_empty{peg3[0] = DISK_EMPTY; peg2[0] = DISK_LARGE;} -> hanoi();

#define goal (peg3[0] == DISK_LARGE && peg3[1] == DISK_SMALL);
#assert hanoi() reaches goal;