#define PLANE_ROWS 4;
#define PLANE_COLUMNS 4;
#define FUEL_CAPACITY 5;
#define BLOCKED_CELL_1_ROW 1;
#define BLOCKED_CELL_1_COLUMN 1;
#define BLOCKED_CELL_2_ROW 2;
#define BLOCKED_CELL_2_COLUMN 2;

var position[2] = [0, 0];
var fuel = 5;

robot() = 
    [fuel >= 1 && fuel <= 5 && position[0] >= 1 && position[0] <= 3 && 
     !(position[0] - 1 == BLOCKED_CELL_1_ROW && position[1] == BLOCKED_CELL_1_COLUMN) && 
     !(position[0] - 1 == BLOCKED_CELL_2_ROW && position[1] == BLOCKED_CELL_2_COLUMN)]
    move_north{position[0] = position[0] - 1; fuel = fuel - 1;} -> robot()
    []
    [fuel >= 1 && fuel <= 5 && position[0] >= 0 && position[0] <= 2 && 
     !(position[0] + 1 == BLOCKED_CELL_1_ROW && position[1] == BLOCKED_CELL_1_COLUMN) && 
     !(position[0] + 1 == BLOCKED_CELL_2_ROW && position[1] == BLOCKED_CELL_2_COLUMN)]
    move_south{position[0] = position[0] + 1; fuel = fuel - 1;} -> robot()
    []
    [fuel >= 1 && fuel <= 5 && position[1] >= 0 && position[1] <= 2 && 
     !(position[0] == BLOCKED_CELL_1_ROW && position[1] + 1 == BLOCKED_CELL_1_COLUMN) && 
     !(position[0] == BLOCKED_CELL_2_ROW && position[1] + 1 == BLOCKED_CELL_2_COLUMN)]
    move_east{position[1] = position[1] + 1; fuel = fuel - 1;} -> robot()
    []
    [fuel >= 1 && fuel <= 5 && position[1] >= 1 && position[1] <= 3 && 
     !(position[0] == BLOCKED_CELL_1_ROW && position[1] - 1 == BLOCKED_CELL_1_COLUMN) && 
     !(position[0] == BLOCKED_CELL_2_ROW && position[1] - 1 == BLOCKED_CELL_2_COLUMN)]
    move_west{position[1] = position[1] - 1; fuel = fuel - 1;} -> robot();

#define reach_3_3 (position[0] == 3 && position[1] == 3);
#define reach_2_2 (position[0] == 2 && position[1] == 2);
#define reach_0_0 (position[0] == 0 && position[1] == 0);

#assert robot() |= [](!reach_3_3);
#assert robot() |= [](!reach_2_2);
#assert robot() |= [](reach_0_0 -> [](!reach_0_0));